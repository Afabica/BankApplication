
apiVersion: v1
kind: Namespace
metadata:
  name: my-app

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: my-app
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      imagePullSecrets:
        - name: myapp-frontend-secret
      containers:
        - name: frontend
          image: index.docker.io/afabica234/myapp-frontend:latest
          resources:
            requests:
              cpu: "100m"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: my-app
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: LoadBalancer

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: my-app
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      imagePullSecrets:
        - name: myapp-fontend-secret
      containers:
        - name: backend
          image: index.docker.io/afabica234/myapp-backend:latest
          resources:
            requests:
              cpu: "100m"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: my-app
  labels:
    app: backend
spec:
  selector:
    app: backend  # Fixed incorrect selector (previously had app: nginx)
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: NodePort

---
# Nginx ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: my-app
data:
  nginx.conf: |
    events {}

    http {
        server {
            listen 80;

            location / {
                proxy_pass http://frontend-service;
            }

            location /api/ {
                proxy_pass http://backend-service/;
            }
        }
    }

---
## Prometheus Deployment (Ensuring It Deploys in my-app Namespace)
#apiVersion: monitoring.coreos.com/v1
#kind: ServiceMonitor
#metadata:
#  name: prometheus-monitor
#  namespace: my-app  # Ensures Prometheus is deployed in my-app namespace
#  labels:
#    release: prometheus
#spec:
#  selector:
#    matchLabels:
#      app: backend
#  namespaceSelector:
#    matchNames: ["my-app"]  # Ensures Prometheus monitors services in my-app
#  endpoints:
#    - port: http
#      path: /metrics
#      interval: 30s
#
#---
## Prometheus Service
#apiVersion: v1
#kind: Service
#metadata:
#  name: prometheus-service
#  namespace: my-app
#spec:
#  selector:
#    app: prometheus
#  ports:
#    - protocol: TCP
#      port: 9090
#      targetPort: 9090
#  type: ClusterIP
#
#---
## Prometheus Deployment
#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: prometheus
#  namespace: my-app
#  labels:
#    app: prometheus
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: prometheus
#  template:
#    metadata:
#      labels:
#        app: prometheus
#    spec:
#      containers:
#        - name: prometheus
#          image: prom/prometheus:latest
#          ports:
#            - containerPort: 9090
#          volumeMounts:
#            - name: prometheus-config-volume
#              mountPath: /etc/prometheus
#      volumes:
#        - name: prometheus-config-volume
#          configMap:
#            name: prometheus-config
#
#---
## Prometheus ConfigMap
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: prometheus-config
#  namespace: my-app
#data:
#  prometheus.yml: |
#    global:
#      scrape_interval: 15s
#
#    scrape_configs:
#      - job_name: 'backend'
#        static_configs:
#          - targets: ['backend-service.my-app.svc.cluster.local:80']
#

apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: my-app
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      containers:
        - name: prometheus
          image: prom/prometheus:latest
          ports:
            - containerPort: 9090
          volumeMounts:
            - name: prometheus-config
              mountPath: /etc/prometheus
      volumes:
        - name: prometheus-config
          configMap:
            name: prometheus-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: my-app
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    scrape_configs:
      - job_name: 'spring-boot'
        metrics_path: '/actuator/prometheus'
        static_configs:
          - targets: ['backend-service.my-app.svc.cluster.local:8080']

      - job_name: 'nextjs'
        metrics_path: '/metrics'
        static_configs:
          - targets: ['frontend-service.my-app.svc.cluster.local:3000']
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-service
  namespace: my-app
spec:
  selector:
    app: prometheus
  ports:
    - protocol: TCP
      port: 9090
      targetPort: 9090
  type: ClusterIP


# Grafana Deployment 

apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: my-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:latest
          ports:
            - containerPort: 3000
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              value: "admin"
---
apiVersion: v1
kind: Service
metadata:
  name: grafana-service
  namespace: my-app
spec:
  selector:
    app: grafana
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: LoadBalancer


