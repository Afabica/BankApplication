apiVersion: v1
kind: Namespace
metadata:
  name: my-app

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: my-app
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      imagePullSecrets:
        - name: myapp-frontend-secret
      containers:
        - name: frontend
          image: index.docker.io/afabica234/myapp-frontend:latest
          resources:
            requests:
              cpu: "100m"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3000

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: my-app
  labels:
    app: frontend
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000
  type: LoadBalancer

---
# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: my-app
  labels:
    app: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      imagePullSecrets:
        - name: myapp-backend-secret
      containers:
        - name: backend
          image: index.docker.io/afabica234/myapp-backend:latest
          resources:
            requests:
              cpu: "100m"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080

---
# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: my-app
  labels:
    app: backend
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: NodePort
  selector:
    app: nginx
  ports:
    - port: 80
      targetPort: 80

---
# Nginx ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: my-app
data:
  nginx.conf: |
    events {}

    http {
        server {
            listen 80;

            location / {
                proxy_pass http://frontend-service;
            }

            location /api/ {
                proxy_pass http://backend-service/;
            }
        }
    }

