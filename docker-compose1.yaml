### Namespace Configuration
apiVersion: v1
kind: Namespace
metadata:
  name: my-app

---
### Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  namespace: my-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: index.docker.io/afabica234/myapp-frontend:latest
          ports:
            - containerPort: 3000

---
### Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: my-app
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP

---
### Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  namespace: my-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
        - name: backend
          image: index.docker.io/afabica234/myapp-backend:latest
          ports:
            - containerPort: 8080

---
### Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: my-app
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 8080
      targetPort: 8080
  type: ClusterIP

---
### NGINX ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configmap
  namespace: my-app
data:
  nginx.conf: |
    events {}
    http {
        server {
            listen 80;

            location / {
                proxy_pass http://frontend-service:3000;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
            }

            location /api/ {
                proxy_pass http://backend-service:8080;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }

---
### NGINX Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: my-app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-configmap

---
### NGINX Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: my-app
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer

---
### Explanation of Workflow:
# 1. The frontend and backend are deployed as separate services within the 'my-app' namespace.
# 2. The NGINX deployment is configured to act as a reverse proxy, routing:
#    - '/' to the frontend-service on port 3000.
#    - '/api/' to the backend-service on port 8080.
# 3. NGINX uses a ConfigMap for configuration, ensuring easy updates without rebuilding the Docker image.
# 4. The services are exposed internally via ClusterIP, while NGINX is exposed externally using a LoadBalancer.
# 5. This ensures seamless integration and communication between the frontend, backend, and external users.

