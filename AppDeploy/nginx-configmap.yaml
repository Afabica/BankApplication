#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: nginx-configmap
#data:
#  nginx.conf: |
#    events {}
#
#    http {
#        # Redirect HTTP to HTTPS
#        server {
#            listen 80;
#            server_name bankapplication.com;
#
#            return 301 https://$host$request_uri;
#        }
#
#        # HTTPS server block
#        server {
#            listen 443 ssl;
#            server_name bankapplication.com;
#
#            ssl_certificate /etc/ssl/certs/tls.crt;
#            ssl_certificate_key /etc/ssl/private/tls.key;
#
#            ssl_protocols TLSv1.2 TLSv1.3;
#            ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
#            ssl_prefer_server_ciphers on;
#
#            # Proxy frontend (assumes it's running on HTTP inside the cluster)
#            location / {
#                proxy_pass http://frontend-service:80;
#                proxy_http_version 1.1;
#                proxy_set_header Upgrade $http_upgrade;
#                proxy_set_header Connection 'upgrade';
#                proxy_set_header Host $host;
#                proxy_set_header X-Real-IP $remote_addr;
#                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#                proxy_set_header X-Forwarded-Proto $scheme;
#            }
#
#            # Proxy backend API (adjust port if needed)
#            location /api/ {
#                proxy_pass http://backend-service:8080;
#                proxy_http_version 1.1;
#                proxy_set_header Host $host;
#                proxy_set_header X-Real-IP $remote_addr;
#                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
#                proxy_set_header X-Forwarded-Proto $scheme;
#            }
#        }
#    }



apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-configmap
data:
  nginx.conf: |
    events {}

    http {
        # Redirect HTTP to HTTPS
        server {
            listen 80;
            server_name bankapplication.com;  # Replace with your domain

            send_timeout 600s;
            proxy_read_timeout 600s;
            proxy_connect_timeout 600s;
            proxy_send_timeout 600s;

            # Redirect all HTTP traffic to HTTPS
            return 301 https://$host$request_uri;
            
        }

        # HTTPS server block
        server {
            listen 443 ssl;  # Listen on HTTPS port
            server_name your-domain.com;  # Replace with your domain

            # SSL certificate and key
            ssl_certificate /etc/ssl/certs/tls.crt;  # Path to your SSL certificate
            ssl_certificate_key /etc/ssl/private/tls.key;  # Path to your SSL certificate key

            ssl_protocols TLSv1.2 TLSv1.3;  # Specify supported protocols
            ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384';
            ssl_prefer_server_ciphers on;

            # Proxy for the frontend
            location / {
                proxy_pass https://frontend-service:80;
                proxy_http_version 1.1;
                proxy_set_header Upgrade $http_upgrade;
                proxy_set_header Connection 'upgrade';
                proxy_set_header Host $host;
            }

            # Proxy for the backend API
            location /api/ {
                proxy_pass https://backend-service:8443;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
        }
    }
