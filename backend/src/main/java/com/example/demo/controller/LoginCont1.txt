package com.example.demo.controller;

import com.example.demo.model.LoginUser;
import com.example.demo.model.RegisterUser;
import com.example.demo.repository.RegisterRepo;
import com.example.demo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import com.example.demo.model.LoginUser;
import com.example.demo.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import jakarta.servlet.http.HttpSession;
import org.springframework.http.HttpHeaders;
import org.springframework.validation.annotation.Validated;
import jakarta.validation.Valid;
import org.springframework.validation.BindingResult;
import org.springframework.ui.Model;
import java.util.*;
import com.example.demo.model.Transaction;
import com.example.demo.model.Customer;
import com.example.demo.model.JwtResponse;
import com.example.demo.repository.TransactionRepo;
import com.example.demo.service.TransactionService;
import com.example.demo.repository.CustomerRepo;
import org.springframework.http.HttpStatus;


@RestController
@CrossOrigin(origins = "http://localhost:3000", allowCredentials = "true")
@RequestMapping("/api")
public class LoginCont {

    private UserService userService;
    private RegisterRepo registerRepo;
    private CustomerRepo customerRepo;
    private TransactionRepo transactionRepo;
    private TransactionService transactionService;

    public LoginCont(UserService userService, RegisterRepo registerRepo, CustomerRepo customerRepo, TransactionRepo transactionRepo, TransactionService transactionService) {
        this.userService = userService;
        this.registerRepo = registerRepo;
        this.transactionRepo = transactionRepo;
        this.transactionService = transactionService;
        this.customerRepo = customerRepo;
    }

    /**
     * Fetch all users
     */

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginUser loginDto, HttpSession session) {

        try {
            String token = userService.authenticate(loginDto);
            session.setAttribute("user", loginDto.getUsername());
            Customer customer = customerRepo.findByUsername(loginDto.getUsername());
          //  List<Transaction> transList = transactionService.fetchAllTransactions(customer.getCustomerId());
           // Map<String,Object> response = new HashMap<>();
            //response.put("token", token);
           // response.put("customer", customer);
           // response.put("transactions", transList);
           // return ResponseEntity.ok(new JwtResponse(token));
            return ResponseEntity.ok(token); 
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
        }
    }
    /**
     * Authenticate user and return JWT token (without encryption)
     */
    @PostMapping("/loginwith")
    public ResponseEntity<String> loginWithoutEncryption(@RequestBody LoginUser loginDto, HttpSession session) {
        try {
            String token = userService.authenticateWithoutEncryption(loginDto);
            session.setAttribute("user", loginDto.getUsername());
            Customer customer = customerRepo.findByUsername(loginDto.getUsername());
            Map<String, Object> response = new HashMap<>();
            response.put("customer", customer);
            response.put("token", token);
            return ResponseEntity.ok("Login successful (No Encryption). Token: " + response);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.status(401).body("Error: " + e.getMessage());
        }
    }

//    @PostMapping("/changepass")
//    public ResponseEntity<?> changePassword(@RequestBody LoginUser loginUser, HttpSession session, String Otp) {
//        LoginUser EditUser = loingRepo.findByUsername(loginUser.getUsername());
//        if((EditUser.getUsername()) != null && Otp ==) {
//            
//        }
//    }
}
    

