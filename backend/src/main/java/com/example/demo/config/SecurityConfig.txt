package com.example.demo.config;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationProvider;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.NoOpPasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.http.HttpMethod;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.security.config.Customizer;

import org.apache.catalina.Context;
import org.apache.catalina.connector.Connector;
import org.apache.tomcat.util.descriptor.web.SecurityCollection;
import org.apache.tomcat.util.descriptor.web.SecurityConstraint;
import org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory;
import org.springframework.boot.web.servlet.server.ServletWebServerFactory;
import org.springframework.boot.web.server.WebServerFactoryCustomizer;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Autowired
    private UserDetailsService userDetailsService;

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf(csrf -> csrf.disable()) // Disable CSRF for stateless REST APIs
            .authorizeHttpRequests(request -> request
                .requestMatchers("/api/loginwith").permitAll() // Allow login without authentication
                .requestMatchers("/api/register").permitAll() // Allow registration without authentication
                .requestMatchers("/api/home").permitAll() // Allow home page without authentication
                .anyRequest().authenticated() // All other requests need to be authenticated
            )
            .formLogin(form -> form
                .loginPage("/api/loginwith") // Customize login page
                .loginProcessingUrl("/api/perform_login") // URL to process login
                .defaultSuccessUrl("/api/home", true) // Redirect on successful login
                .failureUrl("/api/login?error=true") // Redirect on failure
                .permitAll() // Allow everyone to access login page
            )
            .logout(logout -> logout
                .logoutUrl("/api/login/perform_logout") // URL to logout
                .deleteCookies("JSESSIONID") // Delete session cookie on logout
                .permitAll()
            )
            .cors(cors -> cors.configurationSource(corsConfigurationSource())) // Enable CORS
            .httpBasic(Customizer.withDefaults()) // Enable basic authentication (if needed)
            .sessionManagement(session -> session
                .sessionCreationPolicy(SessionCreationPolicy.STATELESS) // Use stateless session
            );
        return http.build();
    }

    @Bean
    public AuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService);
        provider.setPasswordEncoder(NoOpPasswordEncoder.getInstance()); // Consider using a secure password encoder
        return provider;
    }

    @Bean
    public CorsConfigurationSource corsConfigurationSource() {
        CorsConfiguration configuration = new CorsConfiguration();
        configuration.addAllowedOrigin("http://localhost:3000"); // Allow frontend from localhost:3000
        configuration.addAllowedMethod("*"); // Allow all HTTP methods
        configuration.addAllowedHeader("*"); // Allow all headers
        configuration.setAllowCredentials(true); // Allow credentials (cookies, authorization headers, etc.)

        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        source.registerCorsConfiguration("/**", configuration); // Apply CORS settings to all paths
        return source;
    }

//    @Bean
//    public ServletWebServerFactory servletContainer() {
//        TomcatServletWebServerFactory factory = new TomcatServletWebServerFactory();
//        factory.addAdditionalTomcatConnectors(createHttpConnector());
//        factory.addAdditionalTomcatConnectors(createHttpsConnector());
////            @Override
////            protected void postProcessContext(Context context) {
////                // Use the modern SecurityConstraint class
////                SecurityConstraint securityConstraint = new SecurityConstraint();
////                securityConstraint.setUserConstraint("CONFIDENTIAL"); // Force HTTPS
////                
////                // Create a SecurityCollection
////                SecurityCollection collection = new SecurityCollection();
////                collection.addPattern("/*"); // Apply to all paths
////                securityConstraint.addCollection(collection);
////
////                // Add the SecurityConstraint to the context
////                context.addConstraint(securityConstraint);
////            }
////        };
//        //tomcat.addAdditionalTomcatConnectors(redirectConnector());
//       // return tomcat;
//        return factory;
//    }
//    @Bean
//    public TomcatServletWebServerFactory servletContainer() {
//        TomcatServletWebServerFactory tomcat = new TomcatServletWebServerFactory();
//        tomcat.addAdditionalTomcatConnectors(createHttpConnector());
//        return tomcat;
//    }
//    
//    private Connector createHttpConnector() {
//        Connector connector = new Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL);
//        connector.setPort(8081);
//        connector.setScheme("http");
//        connector.setSecure(false);
//        return connector;
//    }
//
//    @Bean 
//    public WebServerFactoryCustomizer<TomcatServletWebServerFactory> redirectCustomizer() {
//         return factory -> factory.addAdditionalTomcatConnectors(createHttpsConnector());
//    }
//
//    private Connector createHttpsConnector() {
//        Connector connector = new Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL);
//        connector.setPort(8443);
//        connector.setScheme("https");
//        connector.setSecure(true);
//        connector.setRedirectPort(8443);
//        return connector;
//    }

//    private Connector redirectConnector() {
//        Connector connector = new Connector(TomcatServletWebServerFactory.DEFAULT_PROTOCOL);
//        connector.setScheme("http");
//        connector.setPort(8081); // Listen on port 8080 for HTTP
//        connector.setSecure(false);
//        connector.setRedirectPort(8443); // Redirect HTTP to HTTPS on port 8443
//        return connector;
//    }
}

