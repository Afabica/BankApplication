"use client";

import React, { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import axios from "axios";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faShoppingCart } from "@fortawesome/free-solid-svg-icons";
import dynamic from "next/dynamic";
import PieChart from "./PieChart";
import Promotions from "./Promotions";
import { parseCookies } from "nookies";
import withAuth from "../../tools/withAuth";
import ProfileCards from "../Cards/ProfileCards";
import BankCardsCarousel from "../Cards/ProfileCards";
import CurrencyTable from "../Currency/CurrencyTable";

const Footer = dynamic(() => import("../../hedfot/DashFooter"), { ssr: false });
const Header = dynamic(() => import("../../hedfot/DashHeader"), { ssr: false });
const SidePanel = dynamic(() => import("./SidePanel"), { ssr: false });
const PanelElements = dynamic(() => import("../../hedfot/PanelElements"), {
  ssr: false,
});

function Home() {
  const router = useRouter();
  const [isPanelOpen, setIsPanelOpen] = useState(false);
  const [transactions, setTransactions] = useState([]);
  const [statistics, setStatistics] = useState({});
  const [formData, setFormData] = useState({});
  const [userData, setUserData] = useState({});
  const [offers, setOffers] = useState([]);
  const [error, setError] = useState(null);
  const [promotionsData, setPromotionsData] = useState([]);

  const togglePanel = () => {
    setIsPanelOpen((prev) => !prev);
  };

  const promotions = [
    /* (keep your existing 10 promotions here) */
  ];

  useEffect(() => {
    const fetchProfile = () => {
      const storedCustomer = localStorage.getItem("customer");
      if (storedCustomer) {
        const parsedData = JSON.parse(storedCustomer);
        setFormData(parsedData);
        setUserData(parsedData); // Assuming userData mirrors formData
      }
    };

    const fetchTransactions = async () => {
      const token = localStorage.getItem("token")?.replace(/"/g, "");
      //      if (!token || !formData.id) {
      //        console.error("Missing token or user ID");
      //        return;
      //      }
      console.log("Hello");
      try {
        const response = await axios.get(
          //          `https://localhost:8443/operations/translist?userId=${encodeURIComponent(formData.customerId)}`,
          "https://localhost:8443/operations/translist?user_id=3",
          {
            headers: {
              //              Authorization: `Bearer ${token}`,
              Authorization: `Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJlbGlzYWJldGgiLCJpYXQiOjE3NDc4MjU3NDcsImV4cCI6MTc0NzkxMjE0N30.VA-OfEdwN0NxWYqVh9h1DbEnskurwWMqUK5yC9FZOtVKrdFtmHqsZ8MVPzHMGXNetNIElCIWgAD8JyQPvCWefQ`,
              "Content-Type": "application/json",
            },
          },
        );

        if (response.status === 200) {
          setTransactions(response.data);
        } else {
          console.error("Failed to fetch transactions");
        }
      } catch (err) {
        setError("Error fetching transactions");
        console.error("Fetch error:", err.response?.data || err.message);
      }
    };

    fetchTransactions();
    fetchProfile();
    setPromotionsData(promotions);
  }, [formData.id]);

  return (
    <div className="dashboard-container">
      <SidePanel isOpen={isPanelOpen} onClose={() => setIsPanelOpen(false)}>
        <PanelElements />
      </SidePanel>
      <div className="main-layout">
        <Header togglePanel={togglePanel} isPanelOpen={isPanelOpen} />
        <main className="main-content">
          <div>
            <p>{userData.name || "No Name"}</p>
            <p>{userData.amount || "No Amount"}</p>
            <p>{userData.cardnumber || "No Card Number"}</p>
          </div>

          <section className="account-statistics">
            <div className="stat-card">
              <h2>Total Savings</h2>
              <p>{statistics.savings || "$0"}</p>
            </div>
            <div className="stat-card">
              <h2>Credit Score</h2>
              <p>{statistics.creditScore || "N/A"}</p>
            </div>
            <div className="stat-card">
              <h2>Monthly Income</h2>
              <p>{statistics.monthlyIncome || "$0"}</p>
            </div>
            <div className="stat-card">
              <h2>Monthly Expenses</h2>
              <p>{statistics.monthlyExpenses || "$0"}</p>
            </div>
          </section>

          {error && <p style={{ color: "red" }}>{error}</p>}

          <section id="transactions" className="transactions">
            <div className="title">
              <h1>Recent Transactions</h1>
            </div>
            <table>
              <thead>
                <tr>
                  <th>*</th>
                  <th>Date</th>
                  <th>Description</th>
                  <th>Amount</th>
                </tr>
              </thead>
              <tbody>
                {transactions.length === 0 ? (
                  <tr>
                    <td colSpan="4">No transactions available</td>
                  </tr>
                ) : (
                  transactions.map((tx) => (
                    <tr key={tx.id}>
                      <td>
                        <FontAwesomeIcon
                          icon={faShoppingCart}
                          size="lg"
                          color="#A3C600"
                        />
                      </td>
                      <td>{tx.transactionDate}</td>
                      <td>{tx.description}</td>
                      <td>{tx.amount}</td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </section>

          <section>
            <BankCardsCarousel />
          </section>
          <section className="pie_chart">
            <PieChart />
          </section>

          <section id="bank-offers" className="bank-offers">
            <h2>Bank Offers</h2>
            <div className="offers">
              {offers.map((offer) => (
                <div key={offer.id} className="offer-card">
                  <h3>{offer.title}</h3>
                  <p>{offer.description}</p>
                </div>
              ))}
            </div>
          </section>

          <section>
            <CurrencyTable />
          </section>
          <section>
            <Promotions promotions={promotionsData} />
          </section>
        </main>
        {/* Optionally include Footer */}
        {/* <Footer /> */}
      </div>
    </div>
  );
}

// Uncomment this if you want to protect the page with authentication
// export default withAuth(Home);
export default Home;
